{"meta":{"title":"skying","subtitle":null,"description":null,"author":"qxskying","url":"https://skyingcc.github.io","root":"/"},"pages":[{"title":"about","date":"2019-08-28T13:42:56.000Z","updated":"2019-08-28T13:42:56.799Z","comments":true,"path":"about/index.html","permalink":"https://skyingcc.github.io/about/index.html","excerpt":"","text":""},{"title":"download","date":"2019-08-28T13:43:34.000Z","updated":"2019-08-28T13:43:34.288Z","comments":true,"path":"download/index.html","permalink":"https://skyingcc.github.io/download/index.html","excerpt":"","text":""},{"title":"good","date":"2019-08-28T13:38:53.000Z","updated":"2019-08-28T13:38:53.584Z","comments":true,"path":"good/index.html","permalink":"https://skyingcc.github.io/good/index.html","excerpt":"","text":""},{"title":"movie","date":"2019-08-28T13:43:14.000Z","updated":"2019-08-28T14:18:17.068Z","comments":true,"path":"movie/index.html","permalink":"https://skyingcc.github.io/movie/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-28T13:23:30.000Z","updated":"2019-08-28T14:18:12.114Z","comments":true,"path":"tags/index.html","permalink":"https://skyingcc.github.io/tags/index.html","excerpt":"","text":""},{"title":"wonder","date":"2019-09-06T04:54:03.000Z","updated":"2019-09-06T04:54:37.135Z","comments":true,"path":"wonder/index.html","permalink":"https://skyingcc.github.io/wonder/index.html","excerpt":"","text":""}],"posts":[{"title":"微信小程序技能篇","slug":"wxprogram","date":"2019-09-06T05:00:35.000Z","updated":"2019-09-06T05:33:38.755Z","comments":true,"path":"wxprogram/","link":"","permalink":"https://skyingcc.github.io/wxprogram/","excerpt":"","text":"搜索功能（A）简单版：前端+php后台原理： 表单（输入框、提交按钮、提交的name值) 接收表单数据（js获取表单name=keyword的值） 通过wx.request向服务器后端发起请求查询数据库 返回JSON格式的数据给小程序，js解析渲染到小程序前端展示 界面 代码：index.wxml &lt;!-- 标题 --&gt; &lt;view class=&quot;title&quot;&gt;小程序搜索&lt;/view&gt; &lt;!-- 搜索框view --&gt; &lt;view class=&quot;search_con&quot;&gt; &lt;!-- 表单 --&gt; &lt;form bindsubmit=&quot;formSubmit&quot;&gt; &lt;!-- 记得设置name值，这样JS才能接收name=keyword的值 --&gt; &lt;input type=&quot;text&quot; name=&quot;keyword&quot; class=&quot;search_input&quot; placeholder=&#39;你要找什么呢？&#39;/&gt; &lt;button formType=&quot;submit&quot; class=&quot;search_btn&quot;&gt;搜索&lt;/button&gt; &lt;/form&gt; &lt;/view&gt; &lt;!-- 搜索结果展示 --&gt; &lt;view wx:for=&quot;{{re}}&quot; wx:key=&quot;re&quot; class=&quot;search_result&quot;&gt; &lt;!-- 当提交空白表单的时候 --&gt; &lt;view class=&quot;empty&quot;&gt;{{item.empty}}&lt;/view&gt; &lt;!-- 当有搜索结果的时候 --&gt; &lt;view class=&quot;resname&quot;&gt;{{item.resname}}&lt;/view&gt; &lt;!-- 当查询不到结果的时候 --&gt; &lt;view class=&quot;noresult&quot;&gt;{{item.noresult}}&lt;/view&gt; &lt;/view&gt;index.js const app = getApp() Page({ data: {}, //执行点击事件 formSubmit: function (e) { //声明当天执行的 var that = this; //获取表单所有name=keyword的值 var formData = e.detail.value.keyword; //显示搜索中的提示 wx.showLoading({ title: &#39;搜索中&#39;, icon: &#39;loading&#39; }) //向搜索后端服务器发起请求 wx.request({ //URL url: &#39;http://localhost/search.php?keyword=&#39; + formData, //发送的数据 data: formData, //请求的数据时JSON格式 header: { &#39;Content-Type&#39;:&#39;application/json&#39; }, //请求成功 success: function (res) { //控制台打印（开发调试用） console.log(res.data) //把所有结果存进一个名为re的数组 that.setData({ re: res.data, }) //搜索成功后，隐藏搜索中的提示 wx.hideLoading(); } }) }, })index.wxss /* 搜索样式 */ .title{ text-align: center; font-size: 20px; font-weight: bold; } .search_con{ width: 80%; margin:20px auto; } .search_con .search_input{ border: 1px solid rgb(214, 211, 211); height: 45px; border-radius: 100px; font-size: 17px; padding-left: 15px;/*此处要用padding-left才可以把光标往右移动15像素，不可以用text-indent*/ color: #333; } .search_con .search_btn{ margin-top: 15px; width: 100%; height: 45px; background: #56b273; color: #fff; border-radius: 100px; } .search_result{ width: 80%; margin:10px auto; } .search_result .empty{ text-align: center; color: #f00; font-size: 15px; } .search_result .noresult{ text-align: center; color: #666; font-size: 15px; } .search_result .resname{ text-align: left; color: #333; font-size: 15px; }服务器端 search.php &lt;?php header(&#39;Content-Type:application/json&#39;); //获取表单数据 $keyword1 = $_GET[&quot;keyword&quot;]; //过滤表单空格 $keyword2 = trim($keyword1); //当表单提交空白数据时 if(empty($keyword2)){ //构建数组 $arr = array( &quot;empty&quot; =&gt; &quot;表单不能为空&quot; ); //把数组转换为json $data = json_encode($arr); echo &quot;[$data]&quot;; }else{ //过滤表单特殊字符 $replace = array(&#39;!&#39;,&#39;@&#39;,&#39;#&#39;,&#39;$&#39;,&#39;%&#39;,&#39;^&#39;,&#39;&amp;&#39;,&#39;*&#39;,&#39;(&#39;,&#39;)&#39;,&#39;_&#39;,&#39;-&#39;,&#39;+&#39;,&#39;=&#39;,&#39;{&#39;,&#39;}&#39;,&#39;[&#39;,&#39;]&#39;,&#39;;&#39;,&#39;:&#39;,&#39;&quot;&#39;,&#39;&lt;&#39;,&#39;&gt;&#39;,&#39;?&#39;,&#39;/&#39;,&#39;|&#39;); $keyword3 = str_replace($replace, &#39;&#39;, $keyword2); // 连接数据库 $con = mysql_connect(&quot;数据库地址&quot;,&quot;数据库账号&quot;,&quot;数据库密码&quot;); if (!$con){die(&#39;Could not connect: &#39; . mysql_error());} mysql_select_db(&quot;数据库名&quot;, $con); mysql_query(&quot;SET NAMES UTF8&quot;); //查询数据库 $result = mysql_query(&quot;SELECT * FROM 表名 WHERE 需要查询的字段 like &#39;%$keyword3%&#39; ORDER BY ID DESC&quot;); $results = array(); //查询数据库是否存在这条记录 $exist = mysql_num_rows($result); if ($exist) { //遍历输出 while ($row = mysql_fetch_assoc($result)){ $results[] = $row; } //输出JSON echo json_encode($results); //当查询无结果的时候 }else{ //构建数组 $arr = array( &quot;noresult&quot; =&gt; &quot;暂无结果&quot; ); //把数组转换为json $data = json_encode($arr); echo &quot;[$data]&quot;; } //断开数据库连接 mysql_close($con); } ?&gt;（B）复杂版：待补充注意事项节流处理(频繁调动api的时候需要) // 节流 const throttle = function(fn, delay) { let lastTime = 0 return function () { let nowTime = Date.now() if (nowTime - lastTime &gt; delay || !lastTime) { fn.apply(this, arguments) lastTime = nowTime } } }Page({ // ... // 输入搜索关键字 input: util.throttle(function () { let val = arguments[0].detail.value if (val === &#39;&#39;) { this.setData({ suggList: [] }) this.changeSearchCls() return false } api.getSuggestion({ keyword: val }) .then((res) =&gt; { this.setData({ suggList: res }) this.changeSearchCls() }) .catch((err) =&gt; { console.error(err) }) }, 500), // ... })","categories":[],"tags":[{"name":"wxprogram","slug":"wxprogram","permalink":"https://skyingcc.github.io/tags/wxprogram/"}]},{"title":"","slug":"js","date":"2019-08-30T03:56:29.427Z","updated":"2019-08-30T04:04:03.416Z","comments":true,"path":"js/","link":"","permalink":"https://skyingcc.github.io/js/","excerpt":"","text":"function T(arg){ this.a = arg; return this; } var a = T(2); var b = T(3); console.log(22); console.log(a.a); console.log(33); console.log(b.a);","categories":[],"tags":[]},{"title":"movie","slug":"movie","date":"2019-08-28T13:09:43.000Z","updated":"2019-08-28T14:18:26.961Z","comments":true,"path":"movie/","link":"","permalink":"https://skyingcc.github.io/movie/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"about","slug":"about","date":"2019-08-28T13:09:16.000Z","updated":"2019-08-30T14:33:40.058Z","comments":true,"path":"about/","link":"","permalink":"https://skyingcc.github.io/about/","excerpt":"","text":"事件委托 什么是事件委托 将子元素的事件委托（绑定）给父元素 事件委托的好处 减少绑定的次数 提高性能 新添加的子元素也能享用之前绑定的事件 事件委托的原理 冒泡 触发事件的是谁 子元素 如何找到触发事件的子元素 event.target","categories":[],"tags":[]},{"title":"测试文章","slug":"tags","date":"2019-08-28T12:55:59.000Z","updated":"2019-08-28T13:46:17.256Z","comments":true,"path":"tags/","link":"","permalink":"https://skyingcc.github.io/tags/","excerpt":"","text":"","categories":[],"tags":[{"name":"标签1","slug":"标签1","permalink":"https://skyingcc.github.io/tags/标签1/"},{"name":"标签2","slug":"标签2","permalink":"https://skyingcc.github.io/tags/标签2/"}]},{"title":"download","slug":"download","date":"2019-08-28T12:51:16.000Z","updated":"2019-08-28T12:56:54.317Z","comments":true,"path":"download/","link":"","permalink":"https://skyingcc.github.io/download/","excerpt":"","text":"","categories":[],"tags":[{"name":"资源","slug":"资源","permalink":"https://skyingcc.github.io/tags/资源/"}]},{"title":"abc","slug":"abc","date":"2019-08-28T12:35:17.000Z","updated":"2019-08-30T14:52:36.938Z","comments":true,"path":"abc/","link":"","permalink":"https://skyingcc.github.io/abc/","excerpt":"","text":"分类归档 标签云：#vue #主题 #love 文章分类： 开源 生活 知识 随心 分类目录 近期文章 近期评论 功能： 管理站点 登录 https://hacpai.com/guide/markdown#隐藏文章 (不可行) Installation$ npm install hexo-sage-posts –save UsageAdd sage: true to the front-matter of posts which you want to hide. e.g. Edit source/_posts/lorem-ipsum.md: --- title: &#39;Lorem Ipsum&#39; date: &#39;2019/8/10 11:45:14&#39; sage: true --- Lorem ipsum dolor sit amet, consectetur adipiscing elit. This post will not be shown anywhere, but you can still access it by https://hexo.test/lorem-ipsum/. ConfigIn your site’s _config.yml: hexo-sage-postssage_posts: filter: hidden # Change the filter name to fit your need And the posts of which the front-matter with a hidden: true will be your sage posts. --- title: &#39;Lorem Ipsum&#39; date: &#39;2019/8/10 11:45:14&#39; hidden: true --- Lorem ipsum dolor sit amet, consectetur adipiscing elit.1.（ctrl+K ）+（ctrl+S） 【查看快捷键菜单】 2.ctrl+A 【全选】 3.ctrl+S 【保存】 4.alt+B 【浏览器运行】 5.ctrl+Up/Down 【上下移动文档】 6.alt+Up/Down 【上下移动本行代码】 7.ctrl+Z 【返回上一步】 8.ctrl+Y 【返回上一步】 9.shift+alt+Up/Down 【向上/下复制本行代码】 10.shift+table 【取消缩进】 11.ctrl+B 【是否显示左边侧栏】 12.ctrl+P 【搜索】 13.ctrl+ -/+ 【代码缩放】 14.end键和home键 15.ctrl+shift+Right/Left 【选中】 16.ctrl+shift+N 【打开新窗口】 17.ctrl+shift+W 【关闭新窗口】 18.ctrl+N 【新建文件】 19.ctrl+table 【切换文件】 20.ctrl+ [ / ] 【代码行缩进】 21.ctrl+Enter 【在当前行下边插入一行】 22.ctrl+shift+Enter 【在当前行插入一行】 23.ctrl+Home 【移动到文件行首】 24.ctrl+End 【移动到文件末尾】 25.F12 【转移到定义处】 26.shift+Home/End 【选择光标行首或行尾】 27.ctrl+Delete 【删除光标右侧】 28.ctrl+shift+L【同时选中所有匹配】 29.F11【全屏显示】 30.ctrl+/ 【注释】 随机文章，随机标签，随机网页，随机动态。word = rand()word = rand(3,1) 当用户访问首页index.html时，设定跳转时间，跳转到随机文章页面如/news/???.html，如何实现？ &quot;???&quot;为某个指定的区间，如1-100 function goPage(){ location.href=parsetInt(math.random()*100)+&quot;.html&quot;; } var t=setInterval(&quot;goPage()&quot;,6000); body { background: url(https://source.unsplash.com/random/1600x900); background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%; background-size: cover; } 快速入门markdown Markdown 支持两种标题的语法，Setext 和 atx 形式。Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。 标题二级标题dog’s back 三级标题 一个区间 一个段落在某个区间 一个 H2 emstrongemstrong q w e q a z q s c red green blue black yesterday today futrue 这是一个链接 这是一个title属性的链接 参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容： I get 10 times more traffic from Google than fromYahoo or MSN. 输出 HTML 为： I get 10 times more traffic from Google than from Yahoo or MSN. title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写： I start my morning with a cup of coffee andThe New York Times. 输出 HTML 为： I start my morning with a cup of coffee and The New York Times. 图片 图片的语法和链接很像。 行内形式（title 是选择性的）： 参考形式： 上面两种方法都会输出 HTML 为： 代码 在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &、< 和 > 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码： I strongly recommend against using any &lt;blink&gt; tags. I wish SmartyPants used named entities like &amp;mdash;instead of decimal-encoded entites like &amp;#8212;.输出 HTML 为： I strongly recommend against using any &lt;blink&gt; tags. I wish SmartyPants used named entities like &amp;mdash; instead of decimal-encoded entites like &amp;#8212;. 如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &amp;、&lt; 和 &gt; 也一样会自动转成 HTML 实体。 Markdown 语法: If you want your page to validate under XHTML 1.0 Strict,you’ve got to put paragraph tags in your blockquotes: For example. 输出 HTML 为： If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: &lt;blockquote&gt; &lt;p&gt;For example.&lt;/p&gt; &lt;/blockquote&gt;","categories":[],"tags":[{"name":"k","slug":"k","permalink":"https://skyingcc.github.io/tags/k/"}]}]}